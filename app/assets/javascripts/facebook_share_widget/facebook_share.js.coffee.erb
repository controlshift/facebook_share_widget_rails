#= require underscore.js
#= require backbone.js
#= require handlebars-runtime.js

$ ->
  class NameSearch extends Backbone.Model
    searchFilter: ->
      @get('filter')

    setSearchFilter: (content)->
      @set('filter': content)

  class FacebookFriends extends Backbone.Collection
    url: '/widget/facebook/friends'
    model: app.models.FacebookFriend

    filterBy: (criteria) ->
      unless criteria
        return this.models
      @criteria = criteria
      @filter(@nameMatched)

    nameMatched: (friend) =>
      regex = new RegExp(@criteria, "i")
      regex.test(friend.get('name'))

  class NameSearchView extends Backbone.View
    events:
      'keyup .search-text' : 'filterUpdate'

    render: ->
      $(@el).html(HandlebarsTemplates['facebook_share_widget/templates/name_search']())
      $(@el).children('.search-text').before("<img src='<%= asset_path("facebook_share_widget/facebook-logo.png") %>'/>")
      this

    filterUpdate: ->
      @model.setSearchFilter($('input.search-text').val())

  class FacebookFriendsView extends Backbone.View
    initialize: ->
      @loading()
      
      @nameSearch = new NameSearch
      @nameSearch.on('change', @render, this)
      @nameSearchView = new NameSearchView(el: $('.name-search'), model: @nameSearch)
      @nameSearchView.render()

      @collection = new FacebookFriends
      @collection.on("reset", @render, this)

    load: =>
      self = this
      json_message = $.parseJSON($('.template').text())
      params = { link: json_message.link }
      if json_message.personal_dataId
        params['personal_dataId'] = json_message.personal_dataId
      if json_message.personal_data_type
        params['personal_data_type'] = json_message.personal_data_type
      @collection.fetch({ data: $.param(params) }).complete ->
        FB.init({appId: json_message.appId, cookie: true })
        self.render()

    render: () =>
      this.$el.html(HandlebarsTemplates['facebook_share_widget/templates/all_friends']())
      filteredFriends = @collection.filterBy(@nameSearch.searchFilter())
      @appendFriend friend for friend in filteredFriends

    loading: =>
      this.$el.html(HandlebarsTemplates['facebook_share_widget/templates/all_friends']())
      this.$el.children('#friends').append("<img src='<%= asset_path("facebook_share_widget/loader.gif") %>'/>")

    appendFriend: (friend) ->
      friendView = new app.views.FacebookFriendView(model: friend)
      @$('#friends').append(friendView.render().el)

  if $('#container').length
    f = new FacebookFriendsView(el: $('#container'))
    window.delayed_load = f.load
    setTimeout(window.delayed_load, 100)
